// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  getHealth,
  getHealthStatus,
  getCommentsConversationByConvoUrl,
  getCommentsUserByUsername,
  getCommentsByIdReplies,
  postCommentsNew,
  postCommentsEditById,
  postCommentsDeleteById,
  postCommentsByIdUpvote,
  postCommentsByIdDownvote,
} from "../sdk.gen";
import {
  queryOptions,
  type UseMutationOptions,
  type DefaultError,
} from "@tanstack/react-query";
import type {
  GetHealthData,
  GetHealthStatusData,
  GetCommentsConversationByConvoUrlData,
  GetCommentsUserByUsernameData,
  GetCommentsByIdRepliesData,
  PostCommentsNewData,
  PostCommentsNewResponse,
  PostCommentsEditByIdData,
  PostCommentsEditByIdResponse,
  PostCommentsDeleteByIdData,
  PostCommentsByIdUpvoteData,
  PostCommentsByIdDownvoteData,
} from "../types.gen";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const getHealthQueryKey = (options?: Options<GetHealthData>) =>
  createQueryKey("getHealth", options);

export const getHealthOptions = (options?: Options<GetHealthData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getHealth({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getHealthQueryKey(options),
  });
};

export const getHealthStatusQueryKey = (
  options?: Options<GetHealthStatusData>,
) => createQueryKey("getHealthStatus", options);

export const getHealthStatusOptions = (
  options?: Options<GetHealthStatusData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getHealthStatus({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getHealthStatusQueryKey(options),
  });
};

export const getCommentsConversationByConvoUrlQueryKey = (
  options: Options<GetCommentsConversationByConvoUrlData>,
) => createQueryKey("getCommentsConversationByConvoUrl", options);

export const getCommentsConversationByConvoUrlOptions = (
  options: Options<GetCommentsConversationByConvoUrlData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCommentsConversationByConvoUrl({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getCommentsConversationByConvoUrlQueryKey(options),
  });
};

export const getCommentsUserByUsernameQueryKey = (
  options: Options<GetCommentsUserByUsernameData>,
) => createQueryKey("getCommentsUserByUsername", options);

export const getCommentsUserByUsernameOptions = (
  options: Options<GetCommentsUserByUsernameData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCommentsUserByUsername({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getCommentsUserByUsernameQueryKey(options),
  });
};

export const getCommentsByIdRepliesQueryKey = (
  options: Options<GetCommentsByIdRepliesData>,
) => createQueryKey("getCommentsByIdReplies", options);

export const getCommentsByIdRepliesOptions = (
  options: Options<GetCommentsByIdRepliesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCommentsByIdReplies({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getCommentsByIdRepliesQueryKey(options),
  });
};

export const postCommentsNewQueryKey = (
  options: Options<PostCommentsNewData>,
) => createQueryKey("postCommentsNew", options);

export const postCommentsNewOptions = (
  options: Options<PostCommentsNewData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postCommentsNew({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postCommentsNewQueryKey(options),
  });
};

export const postCommentsNewMutation = (
  options?: Partial<Options<PostCommentsNewData>>,
): UseMutationOptions<
  PostCommentsNewResponse,
  DefaultError,
  Options<PostCommentsNewData>
> => {
  const mutationOptions: UseMutationOptions<
    PostCommentsNewResponse,
    DefaultError,
    Options<PostCommentsNewData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postCommentsNew({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postCommentsEditByIdQueryKey = (
  options: Options<PostCommentsEditByIdData>,
) => createQueryKey("postCommentsEditById", options);

export const postCommentsEditByIdOptions = (
  options: Options<PostCommentsEditByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postCommentsEditById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postCommentsEditByIdQueryKey(options),
  });
};

export const postCommentsEditByIdMutation = (
  options?: Partial<Options<PostCommentsEditByIdData>>,
): UseMutationOptions<
  PostCommentsEditByIdResponse,
  DefaultError,
  Options<PostCommentsEditByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PostCommentsEditByIdResponse,
    DefaultError,
    Options<PostCommentsEditByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postCommentsEditById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postCommentsDeleteByIdQueryKey = (
  options: Options<PostCommentsDeleteByIdData>,
) => createQueryKey("postCommentsDeleteById", options);

export const postCommentsDeleteByIdOptions = (
  options: Options<PostCommentsDeleteByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postCommentsDeleteById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postCommentsDeleteByIdQueryKey(options),
  });
};

export const postCommentsDeleteByIdMutation = (
  options?: Partial<Options<PostCommentsDeleteByIdData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostCommentsDeleteByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostCommentsDeleteByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postCommentsDeleteById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postCommentsByIdUpvoteQueryKey = (
  options: Options<PostCommentsByIdUpvoteData>,
) => createQueryKey("postCommentsByIdUpvote", options);

export const postCommentsByIdUpvoteOptions = (
  options: Options<PostCommentsByIdUpvoteData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postCommentsByIdUpvote({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postCommentsByIdUpvoteQueryKey(options),
  });
};

export const postCommentsByIdUpvoteMutation = (
  options?: Partial<Options<PostCommentsByIdUpvoteData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostCommentsByIdUpvoteData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostCommentsByIdUpvoteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postCommentsByIdUpvote({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postCommentsByIdDownvoteQueryKey = (
  options: Options<PostCommentsByIdDownvoteData>,
) => createQueryKey("postCommentsByIdDownvote", options);

export const postCommentsByIdDownvoteOptions = (
  options: Options<PostCommentsByIdDownvoteData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postCommentsByIdDownvote({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postCommentsByIdDownvoteQueryKey(options),
  });
};

export const postCommentsByIdDownvoteMutation = (
  options?: Partial<Options<PostCommentsByIdDownvoteData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostCommentsByIdDownvoteData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostCommentsByIdDownvoteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postCommentsByIdDownvote({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
