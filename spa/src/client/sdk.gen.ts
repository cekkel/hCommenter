// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetHealthData, GetHealthStatusData, GetCommentsConversationByConvoUrlData, GetCommentsConversationByConvoUrlResponse, GetCommentsUserByUsernameData, GetCommentsUserByUsernameResponse, GetCommentsByIdRepliesData, GetCommentsByIdRepliesResponse, PostCommentsNewData, PostCommentsNewResponse, PostCommentsEditByIdData, PostCommentsEditByIdResponse, PostCommentsDeleteByIdData, PostCommentsByIdUpvoteData, PostCommentsByIdDownvoteData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Returns 200 if service is online
 */
export const getHealth = <ThrowOnError extends boolean = false>(options?: Options<GetHealthData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};

/**
 * Get status of dependant services
 */
export const getHealthStatus = <ThrowOnError extends boolean = false>(options?: Options<GetHealthStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/health/status',
        ...options
    });
};

/**
 * Get all comments for a particular conversation (page)
 */
export const getCommentsConversationByConvoUrl = <ThrowOnError extends boolean = false>(options: Options<GetCommentsConversationByConvoUrlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCommentsConversationByConvoUrlResponse, unknown, ThrowOnError>({
        url: '/comments/conversation/{convoUrl}',
        ...options
    });
};

/**
 * Get all comments for a particular user
 */
export const getCommentsUserByUsername = <ThrowOnError extends boolean = false>(options: Options<GetCommentsUserByUsernameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCommentsUserByUsernameResponse, unknown, ThrowOnError>({
        url: '/comments/user/{username}',
        ...options
    });
};

/**
 * Get all replies for a particular comment
 */
export const getCommentsByIdReplies = <ThrowOnError extends boolean = false>(options: Options<GetCommentsByIdRepliesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCommentsByIdRepliesResponse, unknown, ThrowOnError>({
        url: '/comments/{id}/replies',
        ...options
    });
};

/**
 * Create a new comment and get new ID
 */
export const postCommentsNew = <ThrowOnError extends boolean = false>(options: Options<PostCommentsNewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostCommentsNewResponse, unknown, ThrowOnError>({
        url: '/comments/new',
        ...options,
        headers: {
            'Content-Type': 'application/json;charset=utf-8',
            ...options?.headers
        }
    });
};

/**
 * Edit an existing comment
 */
export const postCommentsEditById = <ThrowOnError extends boolean = false>(options: Options<PostCommentsEditByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostCommentsEditByIdResponse, unknown, ThrowOnError>({
        bodySerializer: null,
        url: '/comments/edit/{id}',
        ...options,
        headers: {
            'Content-Type': 'text/plain;charset=utf-8',
            ...options?.headers
        }
    });
};

/**
 * Delete a comment
 */
export const postCommentsDeleteById = <ThrowOnError extends boolean = false>(options: Options<PostCommentsDeleteByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/comments/delete/{id}',
        ...options
    });
};

/**
 * Upvote a comment
 */
export const postCommentsByIdUpvote = <ThrowOnError extends boolean = false>(options: Options<PostCommentsByIdUpvoteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/comments/{id}/upvote',
        ...options
    });
};

/**
 * Downvote a comment
 */
export const postCommentsByIdDownvote = <ThrowOnError extends boolean = false>(options: Options<PostCommentsByIdDownvoteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/comments/{id}/downvote',
        ...options
    });
};