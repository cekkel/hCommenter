/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * hCommenter.API
 * An API for creating and retrieving conversation comments.
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  GetCommentsConversationConvoUrlParams,
  GetCommentsIdRepliesParams,
  GetCommentsUserUsernameParams,
  NewComment,
  PostCommentsDeleteIdParams,
  PostCommentsEditIdParams,
  PostCommentsNewParams,
  ViewComment,
} from "../model";

import { customInstance } from "../mutator/custom-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Returns 200 if service is online
 */
export const getHealth = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/health`, method: "GET", signal },
    options,
  );
};

export const getGetHealthQueryKey = () => {
  return [`/health`] as const;
};

export const getGetHealthQueryOptions = <
  TData = Awaited<ReturnType<typeof getHealth>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetHealthQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getHealth>>> = ({
    signal,
  }) => getHealth(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHealth>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetHealthQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHealth>>
>;
export type GetHealthQueryError = unknown;

export function useGetHealth<
  TData = Awaited<ReturnType<typeof getHealth>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHealth>>,
          TError,
          Awaited<ReturnType<typeof getHealth>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHealth<
  TData = Awaited<ReturnType<typeof getHealth>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHealth>>,
          TError,
          Awaited<ReturnType<typeof getHealth>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetHealth<
  TData = Awaited<ReturnType<typeof getHealth>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetHealth<
  TData = Awaited<ReturnType<typeof getHealth>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetHealthQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get all comments for a particular conversation (page)
 */
export const getCommentsConversationConvoUrl = (
  convoUrl: string,
  params?: GetCommentsConversationConvoUrlParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ViewComment[]>(
    {
      url: `/comments/conversation/${convoUrl}`,
      method: "GET",
      params,
      signal,
    },
    options,
  );
};

export const getGetCommentsConversationConvoUrlQueryKey = (
  convoUrl: string,
  params?: GetCommentsConversationConvoUrlParams,
) => {
  return [
    `/comments/conversation/${convoUrl}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetCommentsConversationConvoUrlQueryOptions = <
  TData = Awaited<ReturnType<typeof getCommentsConversationConvoUrl>>,
  TError = void,
>(
  convoUrl: string,
  params?: GetCommentsConversationConvoUrlParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommentsConversationConvoUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetCommentsConversationConvoUrlQueryKey(convoUrl, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCommentsConversationConvoUrl>>
  > = ({ signal }) =>
    getCommentsConversationConvoUrl(convoUrl, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!convoUrl,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getCommentsConversationConvoUrl>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCommentsConversationConvoUrlQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCommentsConversationConvoUrl>>
>;
export type GetCommentsConversationConvoUrlQueryError = void;

export function useGetCommentsConversationConvoUrl<
  TData = Awaited<ReturnType<typeof getCommentsConversationConvoUrl>>,
  TError = void,
>(
  convoUrl: string,
  params: undefined | GetCommentsConversationConvoUrlParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommentsConversationConvoUrl>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommentsConversationConvoUrl>>,
          TError,
          Awaited<ReturnType<typeof getCommentsConversationConvoUrl>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCommentsConversationConvoUrl<
  TData = Awaited<ReturnType<typeof getCommentsConversationConvoUrl>>,
  TError = void,
>(
  convoUrl: string,
  params?: GetCommentsConversationConvoUrlParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommentsConversationConvoUrl>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommentsConversationConvoUrl>>,
          TError,
          Awaited<ReturnType<typeof getCommentsConversationConvoUrl>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCommentsConversationConvoUrl<
  TData = Awaited<ReturnType<typeof getCommentsConversationConvoUrl>>,
  TError = void,
>(
  convoUrl: string,
  params?: GetCommentsConversationConvoUrlParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommentsConversationConvoUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetCommentsConversationConvoUrl<
  TData = Awaited<ReturnType<typeof getCommentsConversationConvoUrl>>,
  TError = void,
>(
  convoUrl: string,
  params?: GetCommentsConversationConvoUrlParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommentsConversationConvoUrl>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCommentsConversationConvoUrlQueryOptions(
    convoUrl,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get all comments for a particular user
 */
export const getCommentsUserUsername = (
  username: string,
  params?: GetCommentsUserUsernameParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ViewComment[]>(
    { url: `/comments/user/${username}`, method: "GET", params, signal },
    options,
  );
};

export const getGetCommentsUserUsernameQueryKey = (
  username: string,
  params?: GetCommentsUserUsernameParams,
) => {
  return [`/comments/user/${username}`, ...(params ? [params] : [])] as const;
};

export const getGetCommentsUserUsernameQueryOptions = <
  TData = Awaited<ReturnType<typeof getCommentsUserUsername>>,
  TError = void,
>(
  username: string,
  params?: GetCommentsUserUsernameParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommentsUserUsername>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetCommentsUserUsernameQueryKey(username, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCommentsUserUsername>>
  > = ({ signal }) =>
    getCommentsUserUsername(username, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!username,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getCommentsUserUsername>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCommentsUserUsernameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCommentsUserUsername>>
>;
export type GetCommentsUserUsernameQueryError = void;

export function useGetCommentsUserUsername<
  TData = Awaited<ReturnType<typeof getCommentsUserUsername>>,
  TError = void,
>(
  username: string,
  params: undefined | GetCommentsUserUsernameParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommentsUserUsername>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommentsUserUsername>>,
          TError,
          Awaited<ReturnType<typeof getCommentsUserUsername>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCommentsUserUsername<
  TData = Awaited<ReturnType<typeof getCommentsUserUsername>>,
  TError = void,
>(
  username: string,
  params?: GetCommentsUserUsernameParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommentsUserUsername>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommentsUserUsername>>,
          TError,
          Awaited<ReturnType<typeof getCommentsUserUsername>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCommentsUserUsername<
  TData = Awaited<ReturnType<typeof getCommentsUserUsername>>,
  TError = void,
>(
  username: string,
  params?: GetCommentsUserUsernameParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommentsUserUsername>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetCommentsUserUsername<
  TData = Awaited<ReturnType<typeof getCommentsUserUsername>>,
  TError = void,
>(
  username: string,
  params?: GetCommentsUserUsernameParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommentsUserUsername>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCommentsUserUsernameQueryOptions(
    username,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get all replies for a particular comment
 */
export const getCommentsIdReplies = (
  id: number,
  params?: GetCommentsIdRepliesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ViewComment[]>(
    { url: `/comments/${id}/replies`, method: "GET", params, signal },
    options,
  );
};

export const getGetCommentsIdRepliesQueryKey = (
  id: number,
  params?: GetCommentsIdRepliesParams,
) => {
  return [`/comments/${id}/replies`, ...(params ? [params] : [])] as const;
};

export const getGetCommentsIdRepliesQueryOptions = <
  TData = Awaited<ReturnType<typeof getCommentsIdReplies>>,
  TError = void,
>(
  id: number,
  params?: GetCommentsIdRepliesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommentsIdReplies>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCommentsIdRepliesQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCommentsIdReplies>>
  > = ({ signal }) => getCommentsIdReplies(id, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getCommentsIdReplies>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCommentsIdRepliesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCommentsIdReplies>>
>;
export type GetCommentsIdRepliesQueryError = void;

export function useGetCommentsIdReplies<
  TData = Awaited<ReturnType<typeof getCommentsIdReplies>>,
  TError = void,
>(
  id: number,
  params: undefined | GetCommentsIdRepliesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommentsIdReplies>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommentsIdReplies>>,
          TError,
          Awaited<ReturnType<typeof getCommentsIdReplies>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCommentsIdReplies<
  TData = Awaited<ReturnType<typeof getCommentsIdReplies>>,
  TError = void,
>(
  id: number,
  params?: GetCommentsIdRepliesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommentsIdReplies>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCommentsIdReplies>>,
          TError,
          Awaited<ReturnType<typeof getCommentsIdReplies>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCommentsIdReplies<
  TData = Awaited<ReturnType<typeof getCommentsIdReplies>>,
  TError = void,
>(
  id: number,
  params?: GetCommentsIdRepliesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommentsIdReplies>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetCommentsIdReplies<
  TData = Awaited<ReturnType<typeof getCommentsIdReplies>>,
  TError = void,
>(
  id: number,
  params?: GetCommentsIdRepliesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommentsIdReplies>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCommentsIdRepliesQueryOptions(id, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new comment and get new ID
 */
export const postCommentsNew = (
  newComment: NewComment,
  params?: PostCommentsNewParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<number>(
    {
      url: `/comments/new`,
      method: "POST",
      headers: { "Content-Type": "application/json;charset=utf-8" },
      data: newComment,
      params,
      signal,
    },
    options,
  );
};

export const getPostCommentsNewMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCommentsNew>>,
    TError,
    { data: NewComment; params?: PostCommentsNewParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCommentsNew>>,
  TError,
  { data: NewComment; params?: PostCommentsNewParams },
  TContext
> => {
  const mutationKey = ["postCommentsNew"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCommentsNew>>,
    { data: NewComment; params?: PostCommentsNewParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postCommentsNew(data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCommentsNewMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCommentsNew>>
>;
export type PostCommentsNewMutationBody = NewComment;
export type PostCommentsNewMutationError = void;

export const usePostCommentsNew = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postCommentsNew>>,
      TError,
      { data: NewComment; params?: PostCommentsNewParams },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postCommentsNew>>,
  TError,
  { data: NewComment; params?: PostCommentsNewParams },
  TContext
> => {
  const mutationOptions = getPostCommentsNewMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Edit an existing comment
 */
export const postCommentsEditId = (
  id: number,
  postCommentsEditIdBody: string,
  params?: PostCommentsEditIdParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ViewComment>(
    {
      url: `/comments/edit/${id}`,
      method: "POST",
      headers: { "Content-Type": "text/plain;charset=utf-8" },
      data: postCommentsEditIdBody,
      params,
      signal,
    },
    options,
  );
};

export const getPostCommentsEditIdMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCommentsEditId>>,
    TError,
    { id: number; data: string; params?: PostCommentsEditIdParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCommentsEditId>>,
  TError,
  { id: number; data: string; params?: PostCommentsEditIdParams },
  TContext
> => {
  const mutationKey = ["postCommentsEditId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCommentsEditId>>,
    { id: number; data: string; params?: PostCommentsEditIdParams }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return postCommentsEditId(id, data, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCommentsEditIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCommentsEditId>>
>;
export type PostCommentsEditIdMutationBody = string;
export type PostCommentsEditIdMutationError = void;

export const usePostCommentsEditId = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postCommentsEditId>>,
      TError,
      { id: number; data: string; params?: PostCommentsEditIdParams },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postCommentsEditId>>,
  TError,
  { id: number; data: string; params?: PostCommentsEditIdParams },
  TContext
> => {
  const mutationOptions = getPostCommentsEditIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Delete a comment
 */
export const postCommentsDeleteId = (
  id: number,
  params?: PostCommentsDeleteIdParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/comments/delete/${id}`, method: "POST", params, signal },
    options,
  );
};

export const getPostCommentsDeleteIdMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCommentsDeleteId>>,
    TError,
    { id: number; params?: PostCommentsDeleteIdParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCommentsDeleteId>>,
  TError,
  { id: number; params?: PostCommentsDeleteIdParams },
  TContext
> => {
  const mutationKey = ["postCommentsDeleteId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCommentsDeleteId>>,
    { id: number; params?: PostCommentsDeleteIdParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return postCommentsDeleteId(id, params, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCommentsDeleteIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCommentsDeleteId>>
>;

export type PostCommentsDeleteIdMutationError = void;

export const usePostCommentsDeleteId = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postCommentsDeleteId>>,
      TError,
      { id: number; params?: PostCommentsDeleteIdParams },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postCommentsDeleteId>>,
  TError,
  { id: number; params?: PostCommentsDeleteIdParams },
  TContext
> => {
  const mutationOptions = getPostCommentsDeleteIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Upvote a comment
 */
export const postCommentsIdUpvote = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/comments/${id}/upvote`, method: "POST", signal },
    options,
  );
};

export const getPostCommentsIdUpvoteMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCommentsIdUpvote>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCommentsIdUpvote>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["postCommentsIdUpvote"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCommentsIdUpvote>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return postCommentsIdUpvote(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCommentsIdUpvoteMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCommentsIdUpvote>>
>;

export type PostCommentsIdUpvoteMutationError = void;

export const usePostCommentsIdUpvote = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postCommentsIdUpvote>>,
      TError,
      { id: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postCommentsIdUpvote>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getPostCommentsIdUpvoteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

/**
 * Downvote a comment
 */
export const postCommentsIdDownvote = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/comments/${id}/downvote`, method: "POST", signal },
    options,
  );
};

export const getPostCommentsIdDownvoteMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCommentsIdDownvote>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCommentsIdDownvote>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["postCommentsIdDownvote"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCommentsIdDownvote>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return postCommentsIdDownvote(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCommentsIdDownvoteMutationResult = NonNullable<
  Awaited<ReturnType<typeof postCommentsIdDownvote>>
>;

export type PostCommentsIdDownvoteMutationError = void;

export const usePostCommentsIdDownvote = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postCommentsIdDownvote>>,
      TError,
      { id: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postCommentsIdDownvote>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getPostCommentsIdDownvoteMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
