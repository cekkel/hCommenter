/* tslint:disable */
/* eslint-disable */
/**
 * hCommenter.API
 * An API for creating and retrieving conversation comments.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { NewComment } from '../models';
// @ts-ignore
import type { ViewComment } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all comments for a particular conversation (page)
         * @param {string} convoUrl 
         * @param {CommentsConversationConvoUrlGetSortbyEnum} [sortby] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsConversationConvoUrlGet: async (convoUrl: string, sortby?: CommentsConversationConvoUrlGetSortbyEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'convoUrl' is not null or undefined
            assertParamExists('commentsConversationConvoUrlGet', 'convoUrl', convoUrl)
            const localVarPath = `/comments/conversation/{convoUrl}`
                .replace(`{${"convoUrl"}}`, encodeURIComponent(String(convoUrl)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a comment
         * @param {number} id 
         * @param {CommentsDeleteIdPostSortbyEnum} [sortby] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsDeleteIdPost: async (id: number, sortby?: CommentsDeleteIdPostSortbyEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commentsDeleteIdPost', 'id', id)
            const localVarPath = `/comments/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit an existing comment
         * @param {number} id 
         * @param {string} body 
         * @param {CommentsEditIdPostSortbyEnum} [sortby] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsEditIdPost: async (id: number, body: string, sortby?: CommentsEditIdPostSortbyEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commentsEditIdPost', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('commentsEditIdPost', 'body', body)
            const localVarPath = `/comments/edit/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Downvote a comment
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsIdDownvotePost: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commentsIdDownvotePost', 'id', id)
            const localVarPath = `/comments/{id}/downvote`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all replies for a particular comment
         * @param {number} id 
         * @param {CommentsIdRepliesGetSortbyEnum} [sortby] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsIdRepliesGet: async (id: number, sortby?: CommentsIdRepliesGetSortbyEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commentsIdRepliesGet', 'id', id)
            const localVarPath = `/comments/{id}/replies`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upvote a comment
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsIdUpvotePost: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('commentsIdUpvotePost', 'id', id)
            const localVarPath = `/comments/{id}/upvote`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new comment and get new ID
         * @param {NewComment} body 
         * @param {CommentsNewPostSortbyEnum} [sortby] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsNewPost: async (body: NewComment, sortby?: CommentsNewPostSortbyEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('commentsNewPost', 'body', body)
            const localVarPath = `/comments/new`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json;charset=utf-8';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all comments for a particular user
         * @param {string} username 
         * @param {CommentsUserUsernameGetSortbyEnum} [sortby] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsUserUsernameGet: async (username: string, sortby?: CommentsUserUsernameGetSortbyEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('commentsUserUsernameGet', 'username', username)
            const localVarPath = `/comments/user/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortby !== undefined) {
                localVarQueryParameter['sortby'] = sortby;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns 200 if service is online
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all comments for a particular conversation (page)
         * @param {string} convoUrl 
         * @param {CommentsConversationConvoUrlGetSortbyEnum} [sortby] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsConversationConvoUrlGet(convoUrl: string, sortby?: CommentsConversationConvoUrlGetSortbyEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ViewComment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsConversationConvoUrlGet(convoUrl, sortby, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.commentsConversationConvoUrlGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a comment
         * @param {number} id 
         * @param {CommentsDeleteIdPostSortbyEnum} [sortby] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsDeleteIdPost(id: number, sortby?: CommentsDeleteIdPostSortbyEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsDeleteIdPost(id, sortby, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.commentsDeleteIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Edit an existing comment
         * @param {number} id 
         * @param {string} body 
         * @param {CommentsEditIdPostSortbyEnum} [sortby] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsEditIdPost(id: number, body: string, sortby?: CommentsEditIdPostSortbyEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewComment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsEditIdPost(id, body, sortby, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.commentsEditIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Downvote a comment
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsIdDownvotePost(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsIdDownvotePost(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.commentsIdDownvotePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all replies for a particular comment
         * @param {number} id 
         * @param {CommentsIdRepliesGetSortbyEnum} [sortby] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsIdRepliesGet(id: number, sortby?: CommentsIdRepliesGetSortbyEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ViewComment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsIdRepliesGet(id, sortby, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.commentsIdRepliesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Upvote a comment
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsIdUpvotePost(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsIdUpvotePost(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.commentsIdUpvotePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new comment and get new ID
         * @param {NewComment} body 
         * @param {CommentsNewPostSortbyEnum} [sortby] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsNewPost(body: NewComment, sortby?: CommentsNewPostSortbyEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsNewPost(body, sortby, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.commentsNewPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all comments for a particular user
         * @param {string} username 
         * @param {CommentsUserUsernameGetSortbyEnum} [sortby] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsUserUsernameGet(username: string, sortby?: CommentsUserUsernameGetSortbyEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ViewComment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsUserUsernameGet(username, sortby, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.commentsUserUsernameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns 200 if service is online
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.healthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Get all comments for a particular conversation (page)
         * @param {string} convoUrl 
         * @param {CommentsConversationConvoUrlGetSortbyEnum} [sortby] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsConversationConvoUrlGet(convoUrl: string, sortby?: CommentsConversationConvoUrlGetSortbyEnum, options?: RawAxiosRequestConfig): AxiosPromise<Array<ViewComment>> {
            return localVarFp.commentsConversationConvoUrlGet(convoUrl, sortby, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a comment
         * @param {number} id 
         * @param {CommentsDeleteIdPostSortbyEnum} [sortby] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsDeleteIdPost(id: number, sortby?: CommentsDeleteIdPostSortbyEnum, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.commentsDeleteIdPost(id, sortby, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit an existing comment
         * @param {number} id 
         * @param {string} body 
         * @param {CommentsEditIdPostSortbyEnum} [sortby] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsEditIdPost(id: number, body: string, sortby?: CommentsEditIdPostSortbyEnum, options?: RawAxiosRequestConfig): AxiosPromise<ViewComment> {
            return localVarFp.commentsEditIdPost(id, body, sortby, options).then((request) => request(axios, basePath));
        },
        /**
         * Downvote a comment
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsIdDownvotePost(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.commentsIdDownvotePost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all replies for a particular comment
         * @param {number} id 
         * @param {CommentsIdRepliesGetSortbyEnum} [sortby] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsIdRepliesGet(id: number, sortby?: CommentsIdRepliesGetSortbyEnum, options?: RawAxiosRequestConfig): AxiosPromise<Array<ViewComment>> {
            return localVarFp.commentsIdRepliesGet(id, sortby, options).then((request) => request(axios, basePath));
        },
        /**
         * Upvote a comment
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsIdUpvotePost(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.commentsIdUpvotePost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new comment and get new ID
         * @param {NewComment} body 
         * @param {CommentsNewPostSortbyEnum} [sortby] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsNewPost(body: NewComment, sortby?: CommentsNewPostSortbyEnum, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.commentsNewPost(body, sortby, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all comments for a particular user
         * @param {string} username 
         * @param {CommentsUserUsernameGetSortbyEnum} [sortby] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsUserUsernameGet(username: string, sortby?: CommentsUserUsernameGetSortbyEnum, options?: RawAxiosRequestConfig): AxiosPromise<Array<ViewComment>> {
            return localVarFp.commentsUserUsernameGet(username, sortby, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns 200 if service is online
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.healthGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Get all comments for a particular conversation (page)
     * @param {string} convoUrl 
     * @param {CommentsConversationConvoUrlGetSortbyEnum} [sortby] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public commentsConversationConvoUrlGet(convoUrl: string, sortby?: CommentsConversationConvoUrlGetSortbyEnum, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).commentsConversationConvoUrlGet(convoUrl, sortby, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a comment
     * @param {number} id 
     * @param {CommentsDeleteIdPostSortbyEnum} [sortby] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public commentsDeleteIdPost(id: number, sortby?: CommentsDeleteIdPostSortbyEnum, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).commentsDeleteIdPost(id, sortby, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit an existing comment
     * @param {number} id 
     * @param {string} body 
     * @param {CommentsEditIdPostSortbyEnum} [sortby] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public commentsEditIdPost(id: number, body: string, sortby?: CommentsEditIdPostSortbyEnum, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).commentsEditIdPost(id, body, sortby, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Downvote a comment
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public commentsIdDownvotePost(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).commentsIdDownvotePost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all replies for a particular comment
     * @param {number} id 
     * @param {CommentsIdRepliesGetSortbyEnum} [sortby] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public commentsIdRepliesGet(id: number, sortby?: CommentsIdRepliesGetSortbyEnum, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).commentsIdRepliesGet(id, sortby, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upvote a comment
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public commentsIdUpvotePost(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).commentsIdUpvotePost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new comment and get new ID
     * @param {NewComment} body 
     * @param {CommentsNewPostSortbyEnum} [sortby] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public commentsNewPost(body: NewComment, sortby?: CommentsNewPostSortbyEnum, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).commentsNewPost(body, sortby, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all comments for a particular user
     * @param {string} username 
     * @param {CommentsUserUsernameGetSortbyEnum} [sortby] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public commentsUserUsernameGet(username: string, sortby?: CommentsUserUsernameGetSortbyEnum, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).commentsUserUsernameGet(username, sortby, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns 200 if service is online
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthGet(options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const CommentsConversationConvoUrlGetSortbyEnum = {
    Old: 'Old',
    New: 'New',
    Popular: 'Popular',
    Controversial: 'Controversial'
} as const;
export type CommentsConversationConvoUrlGetSortbyEnum = typeof CommentsConversationConvoUrlGetSortbyEnum[keyof typeof CommentsConversationConvoUrlGetSortbyEnum];
/**
 * @export
 */
export const CommentsDeleteIdPostSortbyEnum = {
    Old: 'Old',
    New: 'New',
    Popular: 'Popular',
    Controversial: 'Controversial'
} as const;
export type CommentsDeleteIdPostSortbyEnum = typeof CommentsDeleteIdPostSortbyEnum[keyof typeof CommentsDeleteIdPostSortbyEnum];
/**
 * @export
 */
export const CommentsEditIdPostSortbyEnum = {
    Old: 'Old',
    New: 'New',
    Popular: 'Popular',
    Controversial: 'Controversial'
} as const;
export type CommentsEditIdPostSortbyEnum = typeof CommentsEditIdPostSortbyEnum[keyof typeof CommentsEditIdPostSortbyEnum];
/**
 * @export
 */
export const CommentsIdRepliesGetSortbyEnum = {
    Old: 'Old',
    New: 'New',
    Popular: 'Popular',
    Controversial: 'Controversial'
} as const;
export type CommentsIdRepliesGetSortbyEnum = typeof CommentsIdRepliesGetSortbyEnum[keyof typeof CommentsIdRepliesGetSortbyEnum];
/**
 * @export
 */
export const CommentsNewPostSortbyEnum = {
    Old: 'Old',
    New: 'New',
    Popular: 'Popular',
    Controversial: 'Controversial'
} as const;
export type CommentsNewPostSortbyEnum = typeof CommentsNewPostSortbyEnum[keyof typeof CommentsNewPostSortbyEnum];
/**
 * @export
 */
export const CommentsUserUsernameGetSortbyEnum = {
    Old: 'Old',
    New: 'New',
    Popular: 'Popular',
    Controversial: 'Controversial'
} as const;
export type CommentsUserUsernameGetSortbyEnum = typeof CommentsUserUsernameGetSortbyEnum[keyof typeof CommentsUserUsernameGetSortbyEnum];
