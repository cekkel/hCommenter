# yamllint disable rule:line-length
---
name: API - Build and Deploy

env:
  RESOURCE_GROUP: "hcommenter"
  LOCATION: "australiaeast"
  API_NAME: "hcommenter-api"
  FRONTEND_NAME: "hcommenter-ui"
  GITHUB_USERNAME: "CharlesEkkel"
  GITHUB_ORG: cekkel
  REGISTRY: ghcr.io
  IDENTITY: hcommenter-identity
  TARGET_PORT: 8080

# yamllint disable-line rule:truthy
on:
  workflow_dispatch:
    inputs:
      rebuild_api_base:
        type: boolean
        description: Rebuild the base image for the API. Takes a long time.
      tags:
        description: "Workflow run reason tags"
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    environment: Build
    outputs:
      image_tag: ${{ steps.construct_tags.outputs.full_image_tag }}
    steps:
      - name: Checkout branch to deploy
        uses: actions/checkout@v3

      # Store the branch name for use in tagging the build.
      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV

      # Then store the tag names as a whole for easy re-use.
      - name: Construct api image tag names
        id: construct_tags
        shell: bash
        run: |
          echo "base_image_tag=${REGISTRY}/${GITHUB_ORG}/${API_NAME}:base" >> $GITHUB_OUTPUT;
          echo "full_image_tag=${REGISTRY}/${GITHUB_ORG}/${API_NAME}:${BRANCH_NAME}" >> $GITHUB_OUTPUT;

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This creates a 'base' image for the API, since installing
      # haskell deps can take >10 mins.
      - name: "Build and push: API base"
        uses: docker/build-push-action@v6
        with:
          context: hCommenter.Api/
          file: hCommenter.Api/deploy/build.Dockerfile
          # Unless explicitly requested, just build the new base from the old one.
          build-args: >
            BASE_IMAGE=${{ github.event.inputs.rebuild_api_base
            && 'haskell:9.10.1-slim-bullseye'
            || steps.construct_tags.outputs.base_image_tag }}
          push: true
          tags: ${{ steps.construct_tags.outputs.base_image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run API Tests
        uses: addnab/docker-run-action@3e77f186b7a929ef010f183a9e24c0f9955ea609
        with:
          image: ${{ steps.construct_tags.outputs.base_image_tag }}
          options: --env-file .env
          run: make test-ci

      # Now actually create the API image.
      - name: "Build and push: API full image"
        uses: docker/build-push-action@v6
        with:
          context: hCommenter.Api/
          file: hCommenter.Api/deploy/run.Dockerfile
          build-args: BASE_IMAGE=${{ steps.construct_tags.outputs.base_image_tag }}
          push: true
          tags: ${{ steps.construct_tags.outputs.full_image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-test:
    needs: build
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Log in to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Container App
        uses: azure/container-apps-deploy-action@v2
        with:
          registryUrl: ${{ env.REGISTRY }}
          registryUsername: ${{ github.actor }}
          registryPassword: ${{ secrets.GITHUB_TOKEN }}
          imageToDeploy: ${{ needs.build.outputs.image_tag }}
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          containerAppName: ${{ env.API_NAME }}
          targetPort: ${{ env.TARGET_PORT }}
          location: ${{ env.LOCATION }}
          environmentVariables: >
            APP__NAME=hCommenter-Api
            APP__ENVIRONMENT=Test
            APP__PORT=80
            APP__BACKEND=SQLite
            LOGGING__SEVERITY=Debug
            LOGGING__VERBOSITY=V0
            LOGGING__GRAFANA_URL=logs-prod-026.grafana.net
            LOGGING__GRAFANA_ACC=1094195
            LOGGING__GRAFANA_TOKEN=${{ secrets.GRAFANA_TOKEN }}
            LOGGING__ENABLE_LOG_DEBUGGING_IN_CONSOLE=false

  #  deploy-production:
  #    steps:
